/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.buw.se;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class AppGUI extends Application {

    // label to display the balance
    private Label balanceLabel;
    

    @Override
    public void start(Stage stage) {
        stage.setTitle("Simple Banking Application");

        
        balanceLabel = new Label("Balance: $"+getBalance());
        balanceLabel.setTranslateX(170);
        balanceLabel.setTranslateY(70);
        balanceLabel.setFont(Font.font("Constantia", 40));

        // text field for user input (amount to add)
        TextField addAmountField = new TextField();
        addAmountField.setPromptText("Enter amount you want to deposit");
        addAmountField.setLayoutX(150);
        addAmountField.setLayoutY(200); 
        addAmountField.setPrefSize(200, 20); 

        // text field for user input (amount to withdraw)
        TextField withdrawAmountField = new TextField();
        withdrawAmountField.setPromptText("Enter amount you want to withdraw");
        withdrawAmountField.setLayoutX(150);
        withdrawAmountField.setLayoutY(250); 
        withdrawAmountField.setPrefSize(200, 20); 

        // button to withdraw
        Button withdrawBtn = new Button("Withdraw Balance");
        withdrawBtn.setLayoutX(400);
        withdrawBtn.setLayoutY(250);
        withdrawBtn.setOnAction(e -> {
            try {
                // get the user input and convert it to double for later calculations
                double amountToWithdraw = Double.parseDouble(withdrawAmountField.getText()); 
                // throw an error if the input is negative 
                if (amountToWithdraw < 0) {
                    throw new IllegalArgumentException("Error: Amount cannot be negative.");
                }

                if(getBalance() < amountToWithdraw){

                    //showing prompt when user wants to withdraw more money that he have in his balance
                     throw new IllegalArgumentException("You can't withdraw $" + amountToWithdraw +" from your bank account. Your balance is $" +getBalance() + ". Try another amount!");
                    
                }else{
                    double newBalance = getBalance() - amountToWithdraw;
                setBalance(newBalance); 
                showBalance(newBalance);
                // clear text field
                withdrawAmountField.clear(); 
                }
                
            } catch (NumberFormatException ex) {
                // display prompt when input is invalid    
                Prompt.showPrompt("Error: Please enter a valid number.");
                withdrawAmountField.clear(); 
                
            }catch (IllegalArgumentException ex) {
                // display prompt when input is negative or amount we want to withdraw is more than balance
                Prompt.showPrompt(ex.getMessage());
                withdrawAmountField.clear(); 
            }
        }); 

        // button to add balance
        Button addBtn = new Button("Add Balance");
        addBtn.setLayoutX(400);
        addBtn.setLayoutY(200);
        addBtn.setOnAction(e -> {
            try {
                
                double amountToAdd = Double.parseDouble(addAmountField.getText()); 
                // throw an error if the input is negative 
                if (amountToAdd < 0) {
                    throw new IllegalArgumentException("Error: Amount cannot be negative.");
                }
                double newBalance = getBalance() + amountToAdd;
                // update and display balance
                setBalance(newBalance); 
                showBalance(newBalance);
                // clear text field
                addAmountField.clear(); 
            } catch (NumberFormatException ex) {
                // display prompt when input is invalid
                Prompt.showPrompt("Error: Please enter a valid number.");
                addAmountField.clear(); 
            } catch (IllegalArgumentException ex) {
                // display prompt when input is negative
                Prompt.showPrompt(ex.getMessage());
                addAmountField.clear(); 
            }
        });

        // add elements to the layout
        Pane layout = new Pane();
        layout.getChildren().addAll(balanceLabel,withdrawAmountField, withdrawBtn, addAmountField, addBtn);

        // create a scene with the layout
        Scene scene = new Scene(layout, 640, 480);
        stage.setScene(scene);
        stage.show();
    }



    // get balance from database
    private double getBalance() {
        return DataStoreSql.getBalance(); 
    }
    
    // update balance with the newBalance
    private void setBalance(double newBalance) {
        DataStoreSql.setBalance(newBalance); 
        showBalance(newBalance);
    }

    // method to display balance
    private void showBalance(double newBalance){
        balanceLabel.setText("Balance: $" + String.format("%.2f", newBalance)); 
    }

    
    public static void main(String[] args) {
        launch();
    }
}